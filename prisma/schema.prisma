// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Board       Board[]
  Testimonial Testimonial[]
  Form        Form[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id      String           @id @default(auto()) @map("_id") @db.ObjectId
  type    SubscriptionType @relation(fields: [subscriptionTypeId], references: [id])
  optedAt DateTime

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  subscriptionTypeId String   @db.ObjectId
}

model SubscriptionType {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  price        Float
  discount     Float?
  Subscription Subscription[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([name])
}

model Board {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String?
  active         Boolean
  embedLink      String?
  userId         String        @db.ObjectId
  user           User          @relation(fields: [userId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  // m-n relations
  testimonialIDs String[]      @db.ObjectId
  testimonials   Testimonial[] @relation(fields: [testimonialIDs], references: [id])
  themeIDs       String[]      @db.ObjectId
  themes         Theme[]       @relation(fields: [themeIDs], references: [id])
  tagIDs         String[]      @db.ObjectId
  tags           Tag[]         @relation(fields: [tagIDs], references: [id])

  @@unique([name])
}

model Testimonial {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  active            Boolean
  permissionToShare Boolean?
  imageUploaded     Boolean?
  videoUploaded     Boolean?
  imageLink         String?
  videoLink         String?
  rating            Int?
  createdByEmaail   String
  verified          Boolean?
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @db.ObjectId
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  // m-n relations
  tagIDs            String[] @db.ObjectId
  tags              Tag[]    @relation(fields: [tagIDs], references: [id])
  themeIDs          String[] @db.ObjectId
  themes            Theme[]  @relation(fields: [themeIDs], references: [id])
  boardIDs          String[] @db.ObjectId
  boards            Board[]  @relation(fields: [boardIDs], references: [id])

  socialAccounts SocialAccount[]
}

model Form {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  questions         String[]
  enableImageUpload Boolean
  enableVideoUpload Boolean
  enableRating      Boolean

  createdBy User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Theme {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // m-n relations
  boardIDs       String[]      @db.ObjectId
  boards         Board[]       @relation(fields: [boardIDs], references: [id])
  testimonialIDs String[]      @db.ObjectId
  testimonials   Testimonial[] @relation(fields: [testimonialIDs], references: [id])

  @@unique([name])
}

model Tag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // m-n relations
  boardIDs       String[]      @db.ObjectId
  boards         Board[]       @relation(fields: [boardIDs], references: [id])
  testimonialIDs String[]      @db.ObjectId
  testimonials   Testimonial[] @relation(fields: [testimonialIDs], references: [id])

  @@unique([name])
}

model SocialAccount {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  Plateform     String
  Url           String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Testimonial   Testimonial? @relation(fields: [testimonialId], references: [id])
  testimonialId String?      @db.ObjectId
}
